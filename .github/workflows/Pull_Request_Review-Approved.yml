# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io) - if required. On issue comment, if the comment is `terraform apply`,
# this workflow will use the GitHub Action `GitHubAction_terraform-plan` to run `terraform plan` (speculative plan via Terraform Cloud) 
# and use the the GitHub Action `GitHubAction_terraform-apply` and run `terraform apply`.
#   Documentation
#     - https://github.com/benyboy84/GitHubAction_terraform-plan
#     - https://github.com/benyboy84/GitHubAction_terraform-apply
#
# Prerequisites:
# - An Azure account and Azure Access Credentials
#
# Opional:
# - A Terraform Cloud account
#
# "API-driven workflow" Workspace.
# Environment Variables for your workspace with their respective values.
# - ARM_CLIENT_ID
# - ARM_CLIENT_SECRET
# - ARM_SUBSCRIPTION_ID
# - ARM_TENANT_ID
#
# Terraform Cloud user API token stored as a GitHub secret (e.g. TF_API_TOKEN) in the repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# GitHub secret in step `Setup Terraform`.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Pull Request Approved - Issue_Comment

on:
  pull_request_review:
    types: [submitted, dismissed]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  approved:
    name: Pull Request Approved
    if: ${{ github.event.review.state == 'approved' }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      URL: ${{ github.event.pull_request.comments_url }}
      USER: ${{ github.event.review.user.login }}
    steps:

      - name: Add Pull Request Comment
        run: |
          ACCEPT_HEADER="Accept: application/vnd.github.v3+json"
          AUTH_HEADER="Authorization: token $GITHUB_TOKEN"
          CONTENT_HEADER="Content-Type: application/json"
          PR_COMMENT="Approved by $USER"
          PR_PAYLOAD=$(echo '{}' | jq --arg body "$PR_COMMENT" '.body = $body')
          curl -sS -X POST -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" -H "$CONTENT_HEADER" -d "$PR_PAYLOAD" -L "$URL" > /dev/null

  dismissed:
    name: Pull Request Dismissed
    if: ${{ github.event.review.state == 'dismissed' }}
    runs-on: ubuntu-latest
    steps:          
      - name: Remove Pull Request Comment
        run: |
          echo "INFO     | Looking for an existing PR comment."
          ACCEPT_HEADER="Accept: application/vnd.github+json"
          AUTH_HEADER="Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}"
          PR_COMMENT_URI=$(echo ${{ github.event.repository.comments_url }} | sed "s|{/number}||g")
          PR_COMMENT_URI="${{ github.event.repository.comments_url }}" | sed "s|{/number}||g"
          echo -e "$PR_COMMENT_URI"
          curl -sS -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" -L ${{ github.event.pull_request.comments_url }} | jq '.[] | select(.body|test ("Approved by")) | .id' | while read ID; do
            echo "INFO     | Found existing PR comment: $ID. Deleting."
            PR_COMMENT_URL="$PR_COMMENT_URI/$ID"
            echo $PR_COMMENT_URL
            curl -X DELETE -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" -H "X-GitHub-Api-Version: 2022-11-28" "$PR_COMMENT_URL" 
          done


#          PR_COMMENT_ID=$(curl -sS -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" -L ${{ github.event.pull_request.comments_url }} | jq '.[] | select(.body|test ("Approved by")) | .id')
#          echo $PR_COMMENT_ID
#          if [ "$PR_COMMENT_ID" ]; then
#            for ID in "${PR_COMMENT_ID[@]}"
#          fi