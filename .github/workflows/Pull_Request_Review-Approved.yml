# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io) - if required. On issue comment, if the comment is `terraform apply`,
# this workflow will use the GitHub Action `GitHubAction_terraform-plan` to run `terraform plan` (speculative plan via Terraform Cloud) 
# and use the the GitHub Action `GitHubAction_terraform-apply` and run `terraform apply`.
#   Documentation
#     - https://github.com/benyboy84/GitHubAction_terraform-plan
#     - https://github.com/benyboy84/GitHubAction_terraform-apply
#
# Prerequisites:
# - An Azure account and Azure Access Credentials
#
# Opional:
# - A Terraform Cloud account
#
# "API-driven workflow" Workspace.
# Environment Variables for your workspace with their respective values.
# - ARM_CLIENT_ID
# - ARM_CLIENT_SECRET
# - ARM_SUBSCRIPTION_ID
# - ARM_TENANT_ID
#
# Terraform Cloud user API token stored as a GitHub secret (e.g. TF_API_TOKEN) in the repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# GitHub secret in step `Setup Terraform`.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: Pull Request Approved

on:
  pull_request_review:
    types: [submitted, dismissed]

jobs:
  approved:
    name: Pull Request Approved
    if: ${{ github.event.review.state == 'approved' }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Add Pull Request Comment
        run: |
          ACCEPT_HEADER="Accept: application/vnd.github.v3+json"
          AUTH_HEADER="Authorization: token $GITHUB_TOKEN"
          CONTENT_HEADER="Content-Type: application/json"
          CONTENT_HEADER="Content-Type: application/json"
          PR_COMMENT='# Deployment reviewed by ${{ github.event.review.user.login }}\n
          ## Instructions\n
          Before starting:
          - [ ] Validate that the change request is approved.
          - [ ] You are in a maintenance period to deploy it.\n
          ### Write \`terraform apply\` in a comment.\n
          This will start a workflow that will deploy the required changes to the infrastructure. 
          The result will be displayed in a comment once the task is completed.\n
          If the change is successful:
          - Merge will be done automatically into the `main` branch.
          - Branch will be delete.\n
          If the change is **NOT** successful:
          - Fix the code.
          - Push the code into the current branch.
          - Validate the check status
          - Ask for a review.'
          PR_PAYLOAD=$(echo '{}' | jq --arg body "$PR_COMMENT" '.body = $body')
          curl -sS -X POST -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" -H "$CONTENT_HEADER" -d "$PR_PAYLOAD" -L ${{ github.event.pull_request.comments_url }} > /dev/null
#          ACCEPT_HEADER="Accept: application/vnd.github.v3+json"
#          AUTH_HEADER="Authorization: token $GITHUB_TOKEN"
#          CONTENT_HEADER="Content-Type: application/json"
#          PR_COMMENT="### Deployment reviewed by ${{ github.event.review.user.login }}"
#          PR_PAYLOAD=$(echo '{}' | jq --arg body "$PR_COMMENT" '.body = $body')
#          curl -sS -X POST -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" -H "$CONTENT_HEADER" -d "$PR_PAYLOAD" -L ${{ github.event.pull_request.comments_url }} > /dev/null

  dismissed:
    name: Pull Request Dismissed
    if: ${{ github.event.review.state == 'dismissed' }}
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:     
      - name: Remove Pull Request Comment
        run: |
          echo "INFO     | Looking for an existing PR comment."
          ACCEPT_HEADER="Accept: application/vnd.github.v3+json"
          AUTH_HEADER="Authorization: token $GITHUB_TOKEN"
          PR_COMMENT_URI=$(echo ${{ github.event.pull_request.head.repo.issue_comment_url }} | sed "s|{/number}||g")
          curl -sS -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" -L ${{ github.event.pull_request.comments_url }} | jq '.[] | select(.body|test ("### Deployment reviewed by")) | .id' | while read ID; do
            echo "INFO     | Found existing PR comment: $ID. Deleting."
            PR_COMMENT_URL="$PR_COMMENT_URI/$ID"
            echo $PR_COMMENT_URL
            curl -sS -X DELETE -H "$AUTH_HEADER" -H "$ACCEPT_HEADER" "$PR_COMMENT_URL" > /dev/null
          done
